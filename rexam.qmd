---
title: "R Language Exam"
---

# Big Tech Stock Prices

## 1. Izmantotās bibliotēkas

```{r}
#| warning: false
#| error: false

# Bibliotēku ielāde ####

# tidayverse datu pakotne
library(tidyverse)
# datu iepazīšanās pakotne
library(skimr)

```

## 2. Datu ielāde

```{r}
#| warning: false
#| error: false

# ielādējam datu objektu
tuesdata <- tidytuesdayR::tt_load('2023-02-07')
# sadalām objektu pa datuframe
prices <- tuesdata$big_tech_stock_prices 
companies <- tuesdata$big_tech_companies
```

## 3. Veicam sākotnējo izpētes datu analīzi (*exploratory statistics*)

Pirms datu analīzes nepieciešamas izpētīt pieejamos datus un koriģēt tos tālākajam darbam

```{r}
#| warning: false
#| error: false

# Datu analīze ####
# summary statistics

skim(prices)
skim(companies)

```

Pieejamas divas tabulas:

-   *companies* - 2 kolonnas :

    -   **stock_symbol** - akciju kodi

    -   **company** - uzņēmuma nosaukumu

-   *prices -* 6 kolonnas *:*

    -   **date** - datums

    -   **open** - akcijas vērtība dienas sākumā

    -   **high -** akcijas dienas augstākā vērtība

    -   **low -** akcijas dienas zemākā vērtība

    -   **close -** akcijas vērtība dienas beigās

    -   **adj_close -** slēgšanas cena pēc visu piemērojamo sadalīšanas un dividenžu sadales korekciju veikšanas

    -   **volume** - šajā dienā tirgoto akciju skaits.

Kopumā tabulas ir nelielas, kolonu zinā, bet kopējais datu apjoms ir ievērojams - 45088 tabulas ieraksti un 0 trūkošo datu.

Tālākai apstrāde vai apvienot šīs tabulas ērtākam darbam

### Tabulu apvienošana un tabulas manipulācijas

```{r}
## Tabulu datu tipu pārveidošana ####
data <- prices %>% 
  ## Tabulu apvienošana ####
  left_join(companies, by = "stock_symbol") %>% 
  mutate(
    # definēja, ka date ir pareizā datu formāta
    date = as.Date(date, format = "%Y%m%d"),
    # pārveidojam nominālos mainīgos par faktoriem
    stock_symbol = as.factor(stock_symbol),
    company = as.factor(company),
    # pievienojam jaunu kolonu -  dienas atdevi, kur tiek rēķināta katrai rindai
    dienas_atdeve = round((close - open) / open * 100, 3)
  ) %>% 
  # starprezultātu saglabāšana
  {. ->> data_with_datatypes } %>% 
    # pārsaucam tabulas kolonu
  rename(
    akcija = stock_symbol,
    datums = date,
    atversanas_cena = open,
    augstaka_cena = high,
    zemaka_cena = low,
    slegsanas_cena = close,
    koregeta_slegsanas_cena = adj_close,
    akciju_skaits = volume
  ) %>%
  select(akcija, datums, atversanas_cena, augstaka_cena, zemaka_cena, slegsanas_cena, akciju_skaits, company, dienas_atdeve) %>%
  glimpse()

 
```

Rezultātā ir iegūta viena, apvienota, tabula, ar mainītiem datu tipiem un tulkotiem nosaukumiem.

## 4. Aprakstošā statistika

Dati ir par akciju rezultātiem no 2010. gada 1. janvāra, līdz 2022. gada 29. decembrim. Lai labāk izpētītu šos datus, nepieciešams izveidot papildus

### 4.1 Sākotnējā datu vizualizācija

Nepieciešams iepazīties ar sākotnējiem datiem, lai izvrizītu pētāmos jautājumus vai nakotnes hipotēzes

```{r}
#| warning: false

# grafiku attēlošanas funkcijas inicializēšana
plot_stock <- function(comp){
  # Izveidojam mainīgo ar filtrētiem datiem
  stock_subset <-  data %>% filter(company == comp)
  
  # atridan katra uzņēmuma mazāko un augstāko vērtību
  min_value <- min(stock_subset$atversanas_cena, na.rm = TRUE)
  max_value <- max(stock_subset$atversanas_cena, na.rm = TRUE)
  
  min_date <- stock_subset$datums[which.min(stock_subset$atversanas_cena)]
  max_date <- stock_subset$datums[which.max(stock_subset$atversanas_cena)]
  
  # grafika attēlošana
    ggplot(stock_subset, aes(x = datums)) +
    # vizualizējam atvēršanas cenas
    geom_line(aes(y = atversanas_cena), color = "blue", size = 1) +
    # pievienojam katram grafikam minimālās un maximālās vērtības
    geom_point(aes(x = min_date, y = min_value), color = "red", size = 3) +
    geom_point(aes(x = max_date, y = max_value), color = "green", size = 3) +
    # pievienojam katrai ekstrēmai vērtīas
      geom_text(aes(x = min_date, y = min_value, 
                  label = paste("Min:", round(min_value, 2))), 
              vjust = -1, hjust = -0.2, color = "red") +
    
    geom_text(aes(x = max_date, y = max_value, 
                  label = paste("Max:", round(max_value, 2))), 
              vjust = 1, hjust = 1.5 , color = "green") +


    ggtitle(paste(comp, "Akciju atvēršanas cena")) +
    xlab("Gads") + ylab("Cena") +
    theme_minimal()
}

# grafika zīmēšanas cikls

# attēlo grafikus katrai unikālai kompānijai
for (stock in unique(data$company)){
  print(plot_stock(stock))
}

```

**Šadi varam saglabāt attēlus**

```{r}
# ggsave("ggplot_example.png", plot = p, width = 8, height = 6, dpi = 300)
```

## 5. Datu analīze

### 5.1 Apskatīt akciju sumāros rezultātus

Akciju vidējais pārdotias skaits, vidējā dienas atdeve un tās standartnovirze

```{r}
 #apllūkojam uzņēmumu aprakstošo satistiku
data %>%
  # sagrubējam visus datus pēc uzņēmumiem
  group_by(company) %>% 
  summarise(
    # vidējais pārdotais akciju daudzums
    avg_volume = mean(akciju_skaits, na.rm = TRUE),
    # lielākais pārdoto akciju daudzums dienā
    max_volume = max(akciju_skaits, na.rm = TRUE),
    # mazākais pārdoto akciju daudzums dienā
    min_volume = min(akciju_skaits, na.rm = TRUE),
    # vidējais peļņas rādītājs par periodu
    avg_daily_return = round(mean(dienas_atdeve, na.rm = TRUE), 3),
    # dienas atdeves standartnovirze
    sd_daily_return = round(sd(dienas_atdeve, na.rm = TRUE), 3),
    # vidējā akcijas slēgšanas cena
    avg_close = round(mean(slegsanas_cena, na.rm = TRUE), 2),
    # maksimālā akcijas slēgšanas cena
    max_close = max(slegsanas_cena, na.rm = TRUE),
    # minimālā akcijas slēgšanas cena
    min_close = min(slegsanas_cena, na.rm = TRUE),
    # Volatility - vidējā dienas akcijas cenu izmaiņa (augstākā- zemākā cena)
    avg_volatility = round(mean(augstaka_cena - zemaka_cena, na.rm = TRUE), 2),
    # Kopējā kimilatīvā atdeve par visu periodu 
    cumulative_return = round(((last(slegsanas_cena) - first(slegsanas_cena)) / first(slegsanas_cena)) * 100, 2),
    # kopējās akcijas pārdošanas dienu skaits periodā
    total_trading_days = n(),
    # perioda pirmā diena
    first_date = min(datums),
    last_date = max(datums)
  ) %>% 
  arrange(desc(avg_volume)) %>% 
  tibble()

```
